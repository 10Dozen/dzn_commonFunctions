#include "defines.h"

/*
    Handles incoming RemoteExec for component, generated by fnc_send method.

    (_self) 
    
    Params:
    _cobName (string) - name of the component which COB should be called.
    _methodName (string) - full name of the COB method (like "fnc_someMethod")
    _args (array) - optional list of arguments to be passed with method. Defaults to [].
    _callback (hashmap) - optional callback information hashmap object
    (declared by tSF_Core_RemoteExecFunctionCallback or tSF_Core_RemoteExecFunctionCallback).
    _remoteExecOwner (number) - optional, machine ID to exec callback. 

    Return: nothing

    Example:
    dzn_RCE call ["fnc_receive",
        [
            "FARP",
            "fnc_doStuff",
            [1,2,3],
            _callback
        ]
    ];

*/
params ["_cobName", "_methodName", ["_args", []], ["_callback", nil], ["_remoteExecOwner", remoteExecutedOwner]];

LOG_ "(Receive) Params: %1", _this EOL;

LOG_ "(Receive) _isRemoteExecuted=%1", isRemoteExecuted EOL;
LOG_ "(Receive) remoeExecOwnerActual=%1", remoteExecutedOwner EOL;
LOG_ "(Receive) remoeExecOwnerSaved=%1", _remoteExecOwner EOL;

_cobName = toLowerANSI _cobName;

private _cob = _self get Q(registeredComponents) get _cobName;

// -- If Component not yet registered - store incoming calls 
if (isNil "_cob") exitWith {
    LOG_ "(Receive) Component not yet initialized, adding to queue" EOL;
    _self call [F(store), [_this, _remoteExecOwner]];
};

// -- Otherwise - call Component and retrieve the result
LOG_ "(Receive) Component initialized, calling the COB" EOL;
private _result = _cob call [_methodName, _args];
if (!isNil "_result") then {
    LOG_ "(Receive) Result = %1", _result EOL;
};


LOG_ "(Receive) isNil callback?=%1, _isRemoteExecuted=%2", isNil "_callback", isRemoteExecuted EOL;
if (isNil "_callback") exitWith {
    LOG_ "(Receive) No callback defined, exit..." EOL;
};

// -- If Callback is decared - execute
LOG_ "(Receive) Executing callback with params: _result=%1, _remoteExecOwner=%2", _result, _remoteExecOwner EOL;
_callback call ["executeCallback", [_result, _remoteExecOwner]];
